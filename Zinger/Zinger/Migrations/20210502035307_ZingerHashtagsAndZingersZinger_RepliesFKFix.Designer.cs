// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zinger.Models;

namespace Zinger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210502035307_ZingerHashtagsAndZingersZinger_RepliesFKFix")]
    partial class ZingerHashtagsAndZingersZinger_RepliesFKFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Zinger.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_of_Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Display_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Middle_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0cb197e2-70f5-4848-8379-2a5432c37ea1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0193e801-a78f-4d93-8b0e-f39c8d481f56",
                            Date_of_Birth = new DateTime(1986, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Display_Name = "Jonny5",
                            Email = "jonny5@number5.com",
                            EmailConfirmed = false,
                            First_Name = "Jonny",
                            Last_Name = "Five",
                            LockoutEnabled = false,
                            Middle_Name = "",
                            PasswordHash = "P@$$W0rd",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1196902e-d421-40c4-9654-ea30e94e1c3c",
                            TwoFactorEnabled = false,
                            UserName = "@Number5"
                        });
                });

            modelBuilder.Entity("Zinger.Models.Hashtags", b =>
                {
                    b.Property<string>("Hashtag")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Hashtag");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Zinger.Models.UsersZingers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Zinger_ID")
                        .HasColumnType("int");

                    b.HasKey("Id", "Zinger_ID");

                    b.HasIndex("Zinger_ID");

                    b.ToTable("UsersZingers");
                });

            modelBuilder.Entity("Zinger.Models.Zinger_Replies", b =>
                {
                    b.Property<int>("Replying_Zinger_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date_Time_Stamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Replying_U_ID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Zinger_ID1")
                        .HasColumnType("int");

                    b.Property<string>("Zinger_Reply_Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Replying_Zinger_ID");

                    b.HasIndex("UserId");

                    b.HasIndex("Zinger_ID1");

                    b.ToTable("Zinger_Replies");
                });

            modelBuilder.Entity("Zinger.Models.Zingers", b =>
                {
                    b.Property<int>("Zinger_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date_Time_Stamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Hashtag")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Zinger_Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Zinger_ID");

                    b.ToTable("Zingers");
                });

            modelBuilder.Entity("Zinger.Models.ZingersHashtags", b =>
                {
                    b.Property<int>("Zinger_ID")
                        .HasColumnType("int");

                    b.Property<string>("Hashtag")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Zinger_ID", "Hashtag");

                    b.HasIndex("Hashtag");

                    b.ToTable("ZingersHashtags");
                });

            modelBuilder.Entity("Zinger.Models.ZingersZinger_Replies", b =>
                {
                    b.Property<int>("Zinger_ID")
                        .HasColumnType("int");

                    b.Property<int>("Replying_Zinger_ID")
                        .HasColumnType("int");

                    b.HasKey("Zinger_ID", "Replying_Zinger_ID");

                    b.HasIndex("Replying_Zinger_ID");

                    b.ToTable("ZingersZinger_Replies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Zinger.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Zinger.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zinger.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Zinger.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zinger.Models.UsersZingers", b =>
                {
                    b.HasOne("Zinger.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UsersZingers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zinger.Models.Zingers", "Zingers")
                        .WithMany("UsersZingers")
                        .HasForeignKey("Zinger_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Zingers");
                });

            modelBuilder.Entity("Zinger.Models.Zinger_Replies", b =>
                {
                    b.HasOne("Zinger.Models.ApplicationUser", "User")
                        .WithMany("Zinger_Replies")
                        .HasForeignKey("UserId");

                    b.HasOne("Zinger.Models.Zingers", "Zinger_ID")
                        .WithMany()
                        .HasForeignKey("Zinger_ID1");

                    b.Navigation("User");

                    b.Navigation("Zinger_ID");
                });

            modelBuilder.Entity("Zinger.Models.ZingersHashtags", b =>
                {
                    b.HasOne("Zinger.Models.Hashtags", "Hashtags")
                        .WithMany("ZingersHashtags")
                        .HasForeignKey("Hashtag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zinger.Models.Zingers", "Zingers")
                        .WithMany("ZingersHashtags")
                        .HasForeignKey("Zinger_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtags");

                    b.Navigation("Zingers");
                });

            modelBuilder.Entity("Zinger.Models.ZingersZinger_Replies", b =>
                {
                    b.HasOne("Zinger.Models.Zinger_Replies", "Zinger_Replies")
                        .WithMany("ZingersZinger_Replies")
                        .HasForeignKey("Replying_Zinger_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zinger.Models.Zingers", "Zingers")
                        .WithMany("ZingersZinger_Replies")
                        .HasForeignKey("Zinger_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zinger_Replies");

                    b.Navigation("Zingers");
                });

            modelBuilder.Entity("Zinger.Models.ApplicationUser", b =>
                {
                    b.Navigation("UsersZingers");

                    b.Navigation("Zinger_Replies");
                });

            modelBuilder.Entity("Zinger.Models.Hashtags", b =>
                {
                    b.Navigation("ZingersHashtags");
                });

            modelBuilder.Entity("Zinger.Models.Zinger_Replies", b =>
                {
                    b.Navigation("ZingersZinger_Replies");
                });

            modelBuilder.Entity("Zinger.Models.Zingers", b =>
                {
                    b.Navigation("UsersZingers");

                    b.Navigation("ZingersHashtags");

                    b.Navigation("ZingersZinger_Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
